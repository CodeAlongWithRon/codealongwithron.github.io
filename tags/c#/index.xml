<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Code along with Ron</title>
    <link>https://codealongwithron.github.io/tags/c#/</link>
    <description>Recent content in C# on Code along with Ron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 03 Oct 2020 19:42:36 +0200</lastBuildDate>
    
	<atom:link href="https://codealongwithron.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to create a NuGet package and publish it using an automated build pipeline</title>
      <link>https://codealongwithron.github.io/blog/create-nuget-package/</link>
      <pubDate>Sat, 03 Oct 2020 19:42:36 +0200</pubDate>
      
      <guid>https://codealongwithron.github.io/blog/create-nuget-package/</guid>
      <description>Where we left off in the last post In the last post we created a library that allows us to unit test classes that use HttpClient. Now we want to make this library available for future projects, by creating a NuGet package. We finished the last post with a solution consisting of three projects:
 MockHttpClient PseudoClient PseudoClient.Tests  I have removed the two PseudoClient projects from the solution. As the name suggests they only contained pseudo code to prove that the core project worked.</description>
    </item>
    
    <item>
      <title>Creating a library to unit test classes that use an HttpClient</title>
      <link>https://codealongwithron.github.io/blog/creating-library-unit-test-classes-that-use-httpclient/</link>
      <pubDate>Tue, 29 Sep 2020 15:00:46 +0200</pubDate>
      
      <guid>https://codealongwithron.github.io/blog/creating-library-unit-test-classes-that-use-httpclient/</guid>
      <description>Let&amp;rsquo;s very briefly start with the basics of unit testing: in order to effectively write unit tests, we want our classes to be loosely coupled. To achieve loose coupling, we make use of dependency injection. To learn more about writing testable code, make sure to read my post Learn how to write testable code in C# in only 15 minutes.
An abstraction over the declaration of HttpClient Because we want to prevent tight coupling to HttpClient, we will need an abstraction over it.</description>
    </item>
    
    <item>
      <title>You&#39;ve been using the HttpClient incorrectly</title>
      <link>https://codealongwithron.github.io/blog/youve-been-using-the-httpclient-incorrectly/</link>
      <pubDate>Mon, 28 Sep 2020 16:45:24 +0200</pubDate>
      
      <guid>https://codealongwithron.github.io/blog/youve-been-using-the-httpclient-incorrectly/</guid>
      <description>&lt;h2 id=&#34;why-we-use-the-httpclient-incorrectly&#34;&gt;Why we use the HttpClient incorrectly&lt;/h2&gt;
&lt;p&gt;The HttpClient is being misused as often as it is, because of two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ve been taught to instantiate disposable objects in a using statement&lt;/li&gt;
&lt;li&gt;The majority of the tutorials teach us the wrong way&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Learn how to write testable code in C# in only 15 minutes</title>
      <link>https://codealongwithron.github.io/blog/learn-how-to-write-testable-code-in-only-15-minutes/</link>
      <pubDate>Sat, 19 Sep 2020 20:55:12 +0200</pubDate>
      
      <guid>https://codealongwithron.github.io/blog/learn-how-to-write-testable-code-in-only-15-minutes/</guid>
      <description>&lt;h2 id=&#34;why-you-should-want-to-unit-test&#34;&gt;Why you should want to unit test&lt;/h2&gt;
&lt;p&gt;As an application grows, it becomes harder and harder to do manual testing. At some point the effort that goes into it simply becomes too much. The solution to this problem is automated testing. There are various types of automated tests, but in this course we will focus on unit tests.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>